---
import { getCollection } from "astro:content";
import Layout from "../../layouts/Layout.astro";

interface BlogPost {
  id: string;
  data: {
    title: string;
    pubDate: Date;
    description: string;
    author: string;
    image?: {
      url: string;
      alt: string;
    };
    tags: string[];
  };
}

export async function getStaticPaths() {
  const allPosts = await getCollection("blog");
  const uniqueTags = [
    ...new Set(allPosts.map((post: BlogPost) => post.data.tags).flat()),
  ];

  return uniqueTags.map((tag) => {
    const filteredPosts = allPosts.filter((post: BlogPost) =>
      post.data.tags.includes(tag as string)
    );
    return {
      params: { tag },
      props: { posts: filteredPosts },
    };
  });
}

const { tag } = Astro.params as { tag: string };
const { posts } = Astro.props;
---

<Layout pageTitle={`Posts tagged with #${tag}`}>
  <div class="max-w-3xl mx-auto">
    <header class="py-8">
      <div class="flex items-center mb-6">
        <a
          href="/tags"
          class="inline-flex items-center text-purple-600 dark:text-purple-400 hover:underline"
        >
          <svg
            class="w-4 h-4 mr-2"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
          </svg>
          All Tags
        </a>
      </div>

      <h1 class="text-3xl font-bold mb-4 flex items-center">
        <span class="mr-2">Posts tagged with</span>
        <span
          class="inline-block px-3 py-1 bg-purple-100 dark:bg-purple-900 text-purple-800 dark:text-purple-200 rounded-full"
        >
          #{tag}
        </span>
      </h1>

      <p class="text-lg text-gray-600 dark:text-gray-300">
        Found {posts.length} post{posts.length === 1 ? "" : "s"} with this tag
      </p>
    </header>

    <div class="space-y-8">
      {
        posts.map((post: BlogPost) => (
          <article class="bg-white dark:bg-gray-900 shadow-sm rounded-lg overflow-hidden border border-gray-200 dark:border-gray-800 transition-shadow hover:shadow-md">
            <a href={`/posts/${post.id}/`} class="block">
              {post.data.image && (
                <div class="aspect-video w-full overflow-hidden">
                  <img
                    src={post.data.image.url}
                    alt={post.data.image.alt}
                    class="w-full h-full object-cover transition-transform duration-300 hover:scale-105"
                  />
                </div>
              )}

              <div class="p-6">
                <div class="flex items-center text-sm text-gray-500 dark:text-gray-400 mb-2">
                  <time datetime={post.data.pubDate.toISOString()}>
                    {new Date(post.data.pubDate).toLocaleDateString("en-US", {
                      year: "numeric",
                      month: "long",
                      day: "numeric",
                    })}
                  </time>
                  <span class="mx-2">â€¢</span>
                  <span>{post.data.author}</span>
                </div>

                <h2 class="text-xl font-bold mb-2 text-gray-900 dark:text-white hover:text-purple-600 dark:hover:text-purple-400 transition-colors">
                  {post.data.title}
                </h2>

                <p class="text-gray-600 dark:text-gray-300 mb-4">
                  {post.data.description}
                </p>

                <div class="flex flex-wrap gap-2">
                  {post.data.tags.map((t: string) => (
                    <span
                      class={`inline-block px-2 py-1 text-xs font-medium rounded ${
                        t === tag
                          ? "bg-purple-600 text-white"
                          : "bg-purple-100 dark:bg-purple-900 text-purple-800 dark:text-purple-200"
                      }`}
                    >
                      {t}
                    </span>
                  ))}
                </div>
              </div>
            </a>
          </article>
        ))
      }
    </div>
  </div>
</Layout>
